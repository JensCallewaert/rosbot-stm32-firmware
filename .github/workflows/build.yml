name: Build and release
on:
  workflow_dispatch:
    inputs:
      branch:
        description: "The branch that will be used in the build"
        required: true
        default: "main"
      create_release: 
        description: "Do you want to create release"
        required: false
        type: choice
        options:
          - "yes"
          - "no"
        default: "no"
      release_name: 
        description: "Custom release name"
        required: false
        default: "Mock release"

  repository_dispatch: 
    types: ["trigger_build_and_release"]

jobs:
  build:
    runs-on: ubuntu-20.04
    outputs:
      artifact_name: ${{ steps.prepare-firmware-files.outputs.artifact_name }}
      create_release: ${{ env.create_release }}
      release_name: ${{ env.release_name }}
      tag_name: ${{ env.tag_name }}
    steps:
      - name: Prepare arguments workflow_dispatch
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "rosbot_stm32_firmware_ref=${{ github.event.inputs.branch }}" >> $GITHUB_ENV
          echo "create_release=${{ github.event.inputs.create_release }}" >> $GITHUB_ENV
          echo "release_name=${{ github.event.inputs.release_name }}" >> $GITHUB_ENV
          
      - name: Prepare arguments repository_dispatch
        if: ${{ github.event.action == 'trigger_build_and_release' }}
        run: |
          echo "rosbot_stm32_firmware_ref=${{ github.event.client_payload.release_version }}" >> $GITHUB_ENV        
          echo "create_release=yes" >> $GITHUB_ENV
          echo "release_name=Release v${{ github.event.client_payload.release_version }}" >> $GITHUB_ENV
          echo "tag_name=${{ github.event.client_payload.release_version }}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.rosbot_stm32_firmware_ref }}

      - name: Installing platformio
        run: pip3 install -U platformio==6.1.6

      - name: Build current project using platformio 6.1.6
        run: |
          pio lib install
          pio run

      - name: Prepare firmware files
        id: prepare-firmware-files
        run: |
          echo "artifact_name=firmware_$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          mkdir out
          cp ${{ github.workspace }}/.pio/build/core2_diff/firmware.bin out/firmware_diff.bin
          cp ${{ github.workspace }}/.pio/build/core2_diff/firmware.hex out/firmware_diff.hex
          cp ${{ github.workspace }}/.pio/build/core2_mec/firmware.bin out/firmware_mec.bin
          cp ${{ github.workspace }}/.pio/build/core2_mec/firmware.hex out/firmware_mec.hex
          cp ${{ github.workspace }}/LICENSE out/LICENSE
          cp ${{ github.workspace }}/README.md out/README.md

      - name: Prepare mock tag
        if: ${{ github.event_name == 'workflow_dispatch' && env.create_release == 'yes' }}
        run: |
          echo "tag_name=mock-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          git tag ${{ env.tag_name }}
          git push --tags

      - name: Upload firmware files
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepare-firmware-files.outputs.artifact_name }}
          path: out/*

  release:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.outputs.create_release == 'yes' }}
    steps:
      - name: Download firmware files
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: release_files

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build.outputs.tag_name }}
          generate_release_notes: "true"
          token: ${{ secrets.GH_PAT }}
          draft: "false"
          name: ${{ needs.build.outputs.release_name }}
          files: |
            release_files/firmware_diff.bin
            release_files/firmware_diff.hex
            release_files/firmware_mec.bin
            release_files/firmware_mec.hex
            release_files/LICENSE
            release_files/CHANGELOG.md
